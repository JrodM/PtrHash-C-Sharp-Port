<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net8.0</TargetFramework>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <PlatformTarget>x64</PlatformTarget>
    <Optimize>true</Optimize>
    
    <!-- Server GC for better throughput -->
    <ServerGarbageCollection>true</ServerGarbageCollection>
    <ConcurrentGarbageCollection>true</ConcurrentGarbageCollection>
    
    <!-- Suppress preview features warnings for performance optimizations -->
    <EnablePreviewFeatures>true</EnablePreviewFeatures>
    <NoWarn>$(NoWarn);CA2252</NoWarn>
    
    <!-- AOT settings for BenchmarkDotNet -->
    <NativeAotInstructionSet Condition="'$(PublishAot)'=='true'">-avx512f,-avx512cd,-avx512bw,-avx512dq,-avx512vl,-avx512vbmi</NativeAotInstructionSet>
    <IlcInstructionSet Condition="'$(PublishAot)'=='true'">-avx512f,-avx512cd,-avx512bw,-avx512dq,-avx512vl,-avx512vbmi</IlcInstructionSet>
    <EnableAVX512>false</EnableAVX512>
    <EnableAVX512F>false</EnableAVX512F>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="BenchmarkDotNet" Version="0.13.12" />
    <PackageReference Include="BenchmarkDotNet.Diagnostics.Windows" Version="0.13.12" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="../PtrHash.CSharp.Interop/PtrHashNative.csproj" />
    <ProjectReference Include="../PtrHash.CSharp.Port/PtrHash.CSharp.Port.csproj" />
  </ItemGroup>

  <!-- Copy native library from Rust target directory to output -->
  <ItemGroup>
    <!-- Try both bin/$(Configuration)/net8.0 and target/release paths -->
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so" Condition="$([MSBuild]::IsOSPlatform('Linux')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.so</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.so" Condition="$([MSBuild]::IsOSPlatform('Linux')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.so')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.so</Link>
    </None>
    
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll" Condition="$([MSBuild]::IsOSPlatform('Windows')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.dll</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.dll" Condition="$([MSBuild]::IsOSPlatform('Windows')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.dll')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.dll</Link>
    </None>
    
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib" Condition="$([MSBuild]::IsOSPlatform('OSX')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.dylib</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.dylib" Condition="$([MSBuild]::IsOSPlatform('OSX')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.dylib')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>libptrhash.dylib</Link>
    </None>
    
    <!-- Also copy as 'ptrhash' since .NET runtime looks for both names -->
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so" Condition="$([MSBuild]::IsOSPlatform('Linux')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.so</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.so" Condition="$([MSBuild]::IsOSPlatform('Linux')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.so') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.so')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.so</Link>
    </None>
    
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll" Condition="$([MSBuild]::IsOSPlatform('Windows')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.dll</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.dll" Condition="$([MSBuild]::IsOSPlatform('Windows')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dll') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.dll')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.dll</Link>
    </None>
    
    <None Include="../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib" Condition="$([MSBuild]::IsOSPlatform('OSX')) And Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.dylib</Link>
    </None>
    <None Include="../PtrHash.CSharp.Interop/target/release/libptrhash.dylib" Condition="$([MSBuild]::IsOSPlatform('OSX')) And !Exists('../PtrHash.CSharp.Interop/bin/$(Configuration)/net8.0/libptrhash.dylib') And Exists('../PtrHash.CSharp.Interop/target/release/libptrhash.dylib')">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <Link>ptrhash.dylib</Link>
    </None>
  </ItemGroup>

  <!-- Ensure native library is available for benchmarks -->
  <Target Name="EnsureNativeLibraryForBenchmarks" BeforeTargets="BeforeBuild">
    <PropertyGroup>
      <NativeLibExt Condition="$([MSBuild]::IsOSPlatform('Windows'))">dll</NativeLibExt>
      <NativeLibExt Condition="$([MSBuild]::IsOSPlatform('Linux'))">so</NativeLibExt>
      <NativeLibExt Condition="$([MSBuild]::IsOSPlatform('OSX'))">dylib</NativeLibExt>
      <NativeLibPath>..\PtrHash.CSharp.Interop\target\release\libptrhash.$(NativeLibExt)</NativeLibPath>
    </PropertyGroup>
    

    <Message Text="Checking for native library for benchmarks..." Importance="high" />
    
    <!-- Force release build for benchmarks -->
    <Exec Command="cargo --version" 
          ContinueOnError="true" 
          IgnoreExitCode="true"
          WorkingDirectory="../PtrHash.CSharp.Interop">
      <Output TaskParameter="ExitCode" PropertyName="CargoExitCode" />
    </Exec>
    
    <!-- Always build release for benchmarks -->
    <Exec Command="cargo build --release" 
          WorkingDirectory="../PtrHash.CSharp.Interop"
          Condition="'$(CargoExitCode)' == '0'" />
    
    <Error Text="Cargo not found. Benchmarks require Rust. Please install Rust and ensure cargo is in PATH."
           Condition="'$(CargoExitCode)' != '0'" />
           
    <Error Text="Native library not found at $(NativeLibPath). Rust build may have failed."
           Condition="'$(CargoExitCode)' == '0' And !Exists('$(NativeLibPath)')" />
  </Target>

</Project>