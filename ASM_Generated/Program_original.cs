using System;
using System.Linq;
using System.Runtime.CompilerServices;
using PtrHash.CSharp.Port.Core;
using PtrHash.CSharp.Port.KeyHashers;
using PtrHash.CSharp.Port.BucketFunctions;
using PtrHash.CSharp.Port.Storage;
using PtrHash.CSharp.Port.Collections;

namespace AsmGeneration
{
    class Program
    {
        private static ulong[] _keys = null!;
        private static ulong[] _queryKeys = null!;
        private static PtrHash<ulong, StrongerIntHasher, Linear, UInt32VectorRemappingStorage> _ptrHash = null!;
        private static PtrHashDictionaryU64<ulong> _dict = null!;

        static void Main(string[] args)
        {
            Console.WriteLine("ASM Generation Test for GetIndicesStreamPrefetch");
            Console.WriteLine("================================================");
            
            // Setup test data
            const int keyCount = 100_000;
            const int queryCount = 10_000;
            
            _keys = Enumerable.Range(1, keyCount).Select(i => (ulong)i).ToArray();
            _queryKeys = Enumerable.Range(1, queryCount).Select(i => (ulong)(i * 10)).ToArray();
            
            // Create PtrHash
            _ptrHash = new PtrHash<ulong, StrongerIntHasher, Linear, UInt32VectorRemappingStorage>(_keys, PtrHashParams.DefaultFast);
            
            // Create Dictionary for comparison
            var dictValues = _keys.Select(k => k * 2).ToArray();
            var singlePartParams = new PtrHashParams
            {
                Alpha = 0.99,
                Lambda = 3.0,
                Minimal = true,
                SinglePart = true,
                StorageType = RemappingStorageType.VecU32
            };
            _dict = new PtrHashDictionaryU64<ulong>(_keys, dictValues, ulong.MaxValue, singlePartParams);
            
            Console.WriteLine($"Created PtrHash with {keyCount} keys");
            Console.WriteLine($"Query set: {queryCount} keys");
            Console.WriteLine();
            
            // Force JIT compilation
            WarmupMethods();
            
            Console.WriteLine("Running streaming tests to generate assembly...");
            
            // Test methods that should generate optimized assembly
            TestGetIndicesStreamPrefetch();
            TestGetIndicesStream();
            TestSingleLookups();
            TestSpecificPrefetchPattern();
            TestDictionaryMethods();
            
            Console.WriteLine("Assembly generation complete.");
            Console.WriteLine("Check output for JIT-generated assembly or run with AOT for AOT assembly.");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void WarmupMethods()
        {
            Console.WriteLine("Warming up JIT...");
            
            var indices = new nuint[100];
            var testKeys = _queryKeys.Take(100).ToArray();
            
            // Warmup streaming methods
            _ptrHash.GetIndicesStreamPrefetch(testKeys, indices, minimal: true);
            _ptrHash.GetIndicesStreamPrefetch(testKeys, indices, minimal: false);
            _ptrHash.GetIndicesStream(testKeys, indices, minimal: true);
            _ptrHash.GetIndicesStream(testKeys, indices, minimal: false);
            
            // Warmup single lookups
            for (int i = 0; i < 100; i++)
            {
                _ptrHash.GetIndex(testKeys[i]);
                _ptrHash.GetIndexNoRemap(testKeys[i]);
            }
            
            Console.WriteLine("JIT warmup complete.");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void TestGetIndicesStreamPrefetch()
        {
            Console.WriteLine("Testing GetIndicesStreamPrefetch...");
            
            var indices = new nuint[_queryKeys.Length];
            
            // Test minimal perfect hashing
            _ptrHash.GetIndicesStreamPrefetch(_queryKeys, indices, minimal: true);
            
            // Test non-minimal (faster construction)
            _ptrHash.GetIndicesStreamPrefetch(_queryKeys, indices, minimal: false);
            
            Console.WriteLine($"  Processed {_queryKeys.Length} keys with prefetching");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void TestGetIndicesStream()
        {
            Console.WriteLine("Testing GetIndicesStream (no prefetch)...");
            
            var indices = new nuint[_queryKeys.Length];
            
            // Test minimal perfect hashing
            _ptrHash.GetIndicesStream(_queryKeys, indices, minimal: true);
            
            // Test non-minimal
            _ptrHash.GetIndicesStream(_queryKeys, indices, minimal: false);
            
            Console.WriteLine($"  Processed {_queryKeys.Length} keys without prefetching");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void TestSingleLookups()
        {
            Console.WriteLine("Testing single lookups for comparison...");
            
            ulong sum = 0;
            
            // Single GetIndex calls
            for (int i = 0; i < _queryKeys.Length; i++)
            {
                sum += _ptrHash.GetIndex(_queryKeys[i]);
            }
            
            // Single GetIndexNoRemap calls
            for (int i = 0; i < _queryKeys.Length; i++)
            {
                sum += _ptrHash.GetIndexNoRemap(_queryKeys[i]);
            }
            
            Console.WriteLine($"  Single lookup sum: {sum}");
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void TestSpecificPrefetchPattern()
        {
            Console.WriteLine("Testing specific prefetch patterns...");
            
            var smallBatch = _queryKeys.Take(64).ToArray();  // Cache-line aligned
            var mediumBatch = _queryKeys.Take(512).ToArray(); // Multiple cache lines
            var largeBatch = _queryKeys.Take(4096).ToArray(); // Large batch
            
            var indices64 = new nuint[64];
            var indices512 = new nuint[512];
            var indices4096 = new nuint[4096];
            
            // Test different batch sizes to see prefetch effectiveness
            _ptrHash.GetIndicesStreamPrefetch(smallBatch, indices64, minimal: true);
            _ptrHash.GetIndicesStreamPrefetch(mediumBatch, indices512, minimal: true);
            _ptrHash.GetIndicesStreamPrefetch(largeBatch, indices4096, minimal: true);
            
            Console.WriteLine("  Tested prefetch patterns for 64, 512, and 4096 key batches");
        }
        
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static void TestDictionaryMethods()
        {
            Console.WriteLine("Testing dictionary methods...");
            
            var valuesBuffer1 = new ulong[_queryKeys.Length];
            var valuesBuffer2 = new ulong[_queryKeys.Length];
            
            // Test TryGetValueStream (prefetch)
            _dict.TryGetValueStream(_queryKeys.AsSpan(), valuesBuffer1.AsSpan());
            
            // Test TryGetValueStreamOptimal (individual calls)
            _dict.TryGetValueStreamOptimal(_queryKeys.AsSpan(), valuesBuffer2.AsSpan());
            
            Console.WriteLine($"  Tested both dictionary streaming methods with {_queryKeys.Length} keys");
        }
    }
}
